<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        f////n////w////8P////D////w////+f/8=
</value>
  </data>
</root>